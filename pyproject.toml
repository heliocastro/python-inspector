[build-system]
requires = ["setuptools >= 50", "wheel", "setuptools_scm[toml] >= 6"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
# this is used populated when creating a git archive
# and when there is .git dir and/or there is no git installed
fallback_version = "9999.9999.99"

[tool.pytest.ini_options]
norecursedirs = [
   ".git",
   "bin",
   "dist",
   "build",
   "_build",
   "dist",
   "etc",
   "local",
   "ci",
   "docs",
   "man",
   "share",
   "samples",
   ".cache",
   ".settings",
   "Include",
   "include",
   "Lib",
   "lib",
   "lib64",
   "Lib64",
   "Scripts",
   "thirdparty",
   "tmp",
   "venv",
   "tests/data",
   ".eggs",
   "src/*/data",
   "tests/*/data"
]

python_files = "*.py"

python_classes = "Test"
python_functions = "test"

addopts = [
    "-rfExXw",
    "--strict-markers",
    "--doctest-modules",
    "--import-mode=importlib"
]

log_cli = true
log_cli_level = "INFO"
pythonpath = "src"

[tool.pylint.messages_control]
disable = [
    "abstract-method",
    "arguments-differ",
    "attribute-defined-outside-init",
    "blacklisted-name",
    "chained-comparison",
    "duplicate-code",
    "eval-used",
    "exec-used",
    "expression-not-assigned",
    "fixme",
    "global-statement",
    "invalid-name",
    "import-error",
    "logging-fstring-interpolation",
    "missing-docstring",
    "no-member",
    "no-name-in-module",
    "protected-access",
    "redefined-argument-from-local",
    "redefined-outer-name",
    "reimported",
    "stop-iteration-return",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-return-statements",
    "too-many-statements",
    "unexpected-special-method-signature",
    "unspecified-encoding",
]

[tool.mypy]
follow_imports = "normal"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff]
fix = true
line-length = 120
ignore = [
    'N802',   # function name should be lowercase
    'SIM105', # Suggest contextlib instead of try/except with pass
]
extend-select = [
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "A",   # flakes8-builtins
    "COM", # flakes8-commas
    "C4",  # flake8-comprehensions
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "I",   # isort
    "N",   # pep8 naming
    "UP",  # pyupgrade
    "S",   # bandit
]

# Exclude a variety of commonly ignored directories.
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]

[tool.pyright]
reportUnboundVariable = false
